# -*- coding: utf-8 -*-
"""Submission 2 - Sistem Rekomendasi - Destinasi Wisata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gXihLjYga5kKndmUQ0MszubkG2CKVYUv

# **Laporan Proyek Machine Learning - Saif Rayhan Naufal**

# **PROJECT OVERVIEW**

Indonesia sebagai negara kepulauan terbesar di dunia memiliki berbagai destinasi wisata yang sangat beragam, mulai dari pantai eksotis, gunung berapi yang menakjubkan, hingga kekayaan budaya yang luar biasa. Menurut data dari Kementerian Pariwisata dan Ekonomi Kreatif Republik Indonesia, sektor pariwisata berkontribusi signifikan terhadap perekonomian nasional dengan sektor ini menyumbang sekitar 3,8% dari Produk Domestik Bruto (PDB) Indonesia pada tahun 2023 [(Kemenparekraf, 2024)](https://www.kemenparekraf.go.id/berita/siaran-pers-kemenparekraf-promosikan-bangga-berwisata-di-indonesia-lewat-diatf-2024). Namun, meskipun memiliki potensi yang besar, industri pariwisata Indonesia masih menghadapi tantangan dalam menarik wisatawan, baik domestik maupun internasional untuk mengeksplorasi destinasi yang ada.

Salah satu tantangan utama adalah bagaimana wisatawan dapat menemukan destinasi yang sesuai dengan preferensi mereka. Banyak wisatawan kesulitan dalam memilih tempat wisata yang sesuai dengan minat pribadi mereka, seperti berdasarkan kategori yang disukai misalnya, wisata alam, budaya, dan sejarah atau berdasarkan faktor seperti wilayah dimana wisata tersebut berada. Selain itu, informasi yang tersebar di berbagai platform tidak selalu terintegrasi dengan baik, sehingga wisatawan sering kali merasa bingung dalam menentukan pilihan. Oleh karena itu, penerapan sistem rekomendasi berbasis teknologi bisa diadaptasi untuk mengatasi kebingungan wisatawan. Sistem rekomendasi yang memanfaatkan machine learning dapat membantu wisatawan menemukan destinasi yang sesuai dengan preferensi mereka secara lebih efektif dan efisien.

# **BUSINESS UNDERSTANDING**

## **Problem Statement**

1. Bagaimana memberikan rekomendasi destinasi wisata berdasarkan karakteristik yang serupa dengan destinasi yang pernah dikunjungi wisatawan?
2. Bagaimana sistem dapat memanfaatkan data rating untuk menghasilkan rekomendasi destinasi wisata yang relevan bagi wisatawan?

## **Goals**

1. Mengembangkan sistem rekomendasi yang dapat menganalisis karakteristik antar destinasi wisata untuk memberikan rekomendasi yang relevan dan sesuai dengan preferensi wisatawan.
2. Memanfaatkan data rating untuk menentukan destinasi wisata sehingga mampu memberikan rekomendasi yang lebih personal dan akurat.

## **Solution Statements**

1. Memanfaatkan algoritma berbasis content-based filtering untuk menemukan destinasi dengan karakteristik yang relevan. Sistem ini memanfaatkan atribut-atribut seperti kategori wisata dan lokasi wisata. Perbandingan dilakukan dengan menggunakan TF-IDF untuk merepresentasikan atribut dalam bentuk vektor numerik, sedangkan kesamaan antar destinasi dihitung menggunakan metode seperti cosine similarity.
2. Memanfaatkan collaborative filtering untuk merekomendasikan destinasi wisata berdasarkan rating yang diberikan oleh pengguna dengan preferensi serupa. Collaborative filtering bertujuan untuk menganalisis pola rating yang diberikan oleh wisatawan agar bisa menemukan hubungan preferensi antara pengguna. Metode ini bekerja dengan mengasumsikan bahwa wisatawan dengan kesukaan serupa cenderung memberikan penilaian yang sama pada destinasi tertentu. Salah satu metrik yang digunakan dalam proses ini adalah Root Mean Squared Error (RMSE) karena dapat mengukur seberapa jauh prediksi yang dihasilkan oleh model dari nilai yang sebenarnya.

# **DATA UNDERSTANDING**

## **Data Loading**

Mengimpor library yang diperlukan
"""

import pandas as pd
import numpy as np
from zipfile import ZipFile
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from pathlib import Path
import matplotlib.pyplot as plt

"""Mengambil dataset yang sebelumnya sudah diunggah ke Google Drive"""

file1 = '1t8nUkEtSubcW_q3a025Erw5Y4nlpm-yG'
url1 = f'https://drive.google.com/uc?id={file1}'
df_user = pd.read_csv(url1)

file2 = '1nflmicg9tXkYcai-Q8h61T4GQ9OZQt6x'
url2 = f'https://drive.google.com/uc?id={file2}'
df_place = pd.read_csv(url2)

file3 = '1Rhy-8vbNLR_IIV6NduHbfgQXefL20U1L'
url3 = f'https://drive.google.com/uc?id={file3}'
df_rating = pd.read_csv(url3)

"""Menampilkan 5 baris data dari masing-masing dataset untuk melihat gambaran data"""

# Menampilkan data user
df_user.head()

# Menampilkan data lokasi
df_place.head()

# Menampilkan data rating
df_rating.head()

"""## **Deskripsi Dataset**

Mengecek informasi umum tentang dataset, seperti tipe data dan jumlah nilai non-null dalam setiap kolom dengan fungsi `info()` dan memeriksa ukuran dataset (jumlah baris dan kolom) dengan fungsi `describe()`serta mengecek nilai unik dari masing masing data

### **User**
"""

df_user.info()

df_user.describe()

print('Jumlah data lokasi pengguna: ', len(df_user.Location.unique()))

"""### **Place**"""

df_place.info()

df_place.describe()

print('Jumlah data tempat wisata: ', len(df_place.Place_Id.unique()), '\n')

print('Jumlah data kota dari tempat wisata: ', len(df_place.City.unique()))
print('Kota lokasi wisata: ', df_place.City.unique(), '\n')

print('Banyak kategori wisata: ', len(df_place.Category.unique()))
print('Kategori wisata: ', df_place.Category.unique())

"""### **Rating**"""

df_rating.info()

df_rating.describe()

print('Jumlah data pengguna yang memberikan penilaian: ', len(df_rating.User_Id.unique()))
print('Jumlah data tempat yang dinilai: ', len(df_rating.Place_Id.unique()))

"""# **DATA PREPARATION**

## **Data Preprocessing**

### **Cek Missing Value**

Sebelumnya sudah dicek bahwa sebagian data sudah lengkap, namun untuk memastikan kembali apakah terdapat misiing value terutama pada variabel yang akan digunakan, maka dilakukan kembali pengecekan missing value dengan fungsi isnull()
"""

df_user.isnull().sum()

df_place.isnull().sum()

df_rating.isnull().sum()

"""### **Menyamakan Data Tempat Wisata**"""

tempat_wisata = df_place.sort_values('Place_Id', ascending=True)
tempat_wisata

"""Mengonversi data series menjadi list"""

# Mengonversi data series Place_Id menjadi dalam bentuk list
id_tempat = tempat_wisata['Place_Id'].tolist()

# Mengonversi data series Place_Name menjadi dalam bentuk list
nama_tempat = tempat_wisata['Place_Name'].tolist()

# Mengonversi data series Category menjadi dalam bentuk list
kategori_wisata = tempat_wisata['Category'].tolist()

# Mengonversi data series City menjadi dalam bentuk list
kota_wisata = tempat_wisata['City'].tolist()

print(len(id_tempat))
print(len(nama_tempat))
print(len(kategori_wisata))
print(len(kota_wisata))

"""Membuat dictionary data untuk id_tempat, nama_tempat, kategori_wisata dan kota_wisata"""

wisata = pd.DataFrame({
    'id': id_tempat,
    'nama_tempat': nama_tempat,
    'kategori': kategori_wisata,
    'kota': kota_wisata
})
wisata

"""## **TF-IDF Vectorizer**

Mengubah teks menjadi numerik berbasis fitur (vektor) agar dapat digunakan sebagai input untuk model machine learning
"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Menggunakan ngram_range=(1, 2) untuk mempertahankan unigram dan bigram
tf = TfidfVectorizer(ngram_range=(1, 2))

# Melakukan perhitungan idf pada data kategori dan kota
tf.fit(wisata['kategori'] + ' ' + wisata['kota'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""Melakukan fit lalu ditransformasikan ke bentuk matrix"""

tfidf_matrix = tf.fit_transform(wisata['kategori'] + ' ' + wisata['kota'])
tfidf_matrix.shape

"""Menghasilkan vektor tf-idf dalam bentuk matriks dengan fungsi `todense()`"""

tfidf_matrix_dense = tfidf_matrix.todense()
tfidf_matrix_dense

"""Membuat dataframe untuk melihat tf-idf matrix dengan mengisi kolom dengan kategori dan kota sedangkan baris diisi dengan nama tempat"""

import pandas as pd
pd.DataFrame(
    tfidf_matrix_dense,
    columns=tf.get_feature_names_out(),
    index=wisata['nama_tempat']
).sample(46, axis=1).sample(10, axis=0)

"""## **Membagi Data untuk Training dan Validasi**

Mengecek jumlah data pada dataset rating seperti user dan tempat unik serta mengubah nilai rating menjadi float.
"""

# Mendapatkan jumlah user dan tempat
num_users = df_rating['User_Id'].nunique()
print('Number of Users: ', num_users)

num_place = df_rating['Place_Id'].nunique()
print('Number of Places: ', num_place)

# Mengubah rating menjadi nilai float
df_rating['Place_Ratings'] = df_rating['Place_Ratings'].values.astype(np.float32)

# Nilai minimum dan maksimal rating
min_rating = min(df_rating['Place_Ratings'])
max_rating = max(df_rating['Place_Ratings'])

print(f'Number of User: {num_users}, Number of Place: {num_place}, Min Rating: {min_rating}, Max Rating: {max_rating}')

"""Mengacak dataset"""

df_rating = df_rating.sample(frac=1, random_state=42)
df_rating

"""Membagi data train dan validasi dengan komposisi 80:20 dan juga memetakan data user dan tempat menjadi satu value terlebih dahulu serta mengubah rating menjadi skala 0 sampai 1 agar mudah dalam melakukan proses training."""

# Membuat variabel x untuk mencocokkan data user dan place
x = df_rating[['User_Id', 'Place_Id']].values

# Membuat variabel y untuk rating yang sudah dinormalisasi
y = df_rating['Place_Ratings'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values

# Membagi data menjadi 80% untuk training dan 20% untuk validasi
train_indices = int(0.8 * df_rating.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)
# Penyesuaian indeks agar mulai dari 0
x_train[:, 0] -= 1  # Mengurangi 1 pada User_Id
x_train[:, 1] -= 1  # Mengurangi 1 pada Place_Id
x_val[:, 0] -= 1    # Sama untuk data validasi
x_val[:, 1] -= 1

# Memeriksa hasil penyesuaian
print("x_train setelah penyesuaian:\n", x_train)
print("x_val setelah penyesuaian:\n", x_val)
print(x, y)

"""# **MODELING**

## **Model Development dengan Content Based Filtering**

### **Cosine Similarity**

Menghitung cosine similarity pada matrix tf-idf
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama tempat lalu menampilkan similarity matrix pada setiap tempat


"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=wisata['nama_tempat'], columns=wisata['nama_tempat'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""### **Mendapatkan Rekomendasi**

Melihat rekomendasi tempat wisata berdasarkan kemiripan dataframe
"""

def tempat_rekomendasi(nama_tempat, similarity_data=cosine_sim_df, items=wisata[['nama_tempat', 'kategori', 'kota']], k=5):

    index = similarity_data.loc[:,nama_tempat].to_numpy().argpartition(
        range(-1, -k, -1))

    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(nama_tempat, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""Menghapus tempat wisata yang akan dicari agar tidak muncul dalam daftar rekomendasi."""

wisata[wisata.nama_tempat.eq('Surabaya North Quay')]

"""Menampilkan rekomendasi tempat wisata yang mirip dengan "Surabaya North Quay"
"""

tempat_rekomendasi('Surabaya North Quay')

"""## **Model Development dengan Collaborative Filtering**

### **Proses Training**

Membuat class RecommenderNet dengan Keras Model class untuk sistem rekomendasi berbasis embedding matriks
"""

class RecommenderNet(tf.keras.Model):
    def __init__(self, num_users, num_place, embedding_size, **kwargs):
        super(RecommenderNet, self).__init__(**kwargs)
        self.num_users = num_users
        self.num_place = num_place
        self.embedding_size = embedding_size

        # Layer embedding untuk user
        self.user_embedding = layers.Embedding(
            num_users,
            embedding_size,
            embeddings_initializer='he_normal',
            embeddings_regularizer=keras.regularizers.l2(1e-6)
        )

        # Dropout untuk user embedding
        self.user_dropout = layers.Dropout(0.2)  # Dropout dengan rate 20%

        # Bias untuk user
        self.user_bias = layers.Embedding(num_users, 1)

        # Layer embedding untuk place
        self.place_embedding = layers.Embedding(
            num_place,
            embedding_size,
            embeddings_initializer='he_normal',
            embeddings_regularizer=keras.regularizers.l2(1e-6)
        )

        # Dropout untuk place embedding
        self.place_dropout = layers.Dropout(0.2)  # Dropout dengan rate 20%

        # Bias untuk place
        self.place_bias = layers.Embedding(num_place, 1)

    def call(self, inputs):
        user_vector = self.user_embedding(inputs[:, 0])  # embedding untuk user
        user_bias = self.user_bias(inputs[:, 0])  # bias untuk user
        place_vector = self.place_embedding(inputs[:, 1])  # embedding untuk place
        place_bias = self.place_bias(inputs[:, 1])  # bias untuk place

        # Menghitung dot product antara user dan place embedding
        dot_user_place = tf.tensordot(user_vector, place_vector, 2)

        # Menambahkan bias
        x = dot_user_place + user_bias + place_bias

        return tf.nn.sigmoid(x) # activation sigmoid

"""Inisialisasi model dan melakukan proses compile terhadap model"""

model = RecommenderNet(num_users, num_place, 10)

# Model compile
model.compile(
    loss=tf.keras.losses.BinaryCrossentropy(),
    optimizer=keras.optimizers.Adam(learning_rate=0.0001),
    metrics= [tf.keras.metrics.RootMeanSquaredError()]
)

"""Melakukan training"""

# Memulai training
history = model.fit(
    x=x_train,
    y=y_train,
    batch_size=64,
    epochs=100,
    validation_data=(x_val, y_val)
)

"""### **Mendapatkan Rekomendasi Wisata**

Menggunakan rating ini untuk membuat rekomendasi wisata yang mungkin cocok untuk pengguna
"""

df_wisata = wisata

# Mengambil sample user
id_user = df_rating.User_Id.sample(1).iloc[0]
place_visited_by_user = df_rating[df_rating.User_Id == id_user]

# Mengidentifikasi tempat yang belum dikunjungi
place_not_visited = df_wisata[~df_wisata['id'].isin(place_visited_by_user.Place_Id.values)]['id']
place_not_visited = np.array(place_not_visited).reshape(-1, 1)

# Membuat array untuk input model
user_place_array = np.hstack(
    (np.full((len(place_not_visited), 1), id_user), place_not_visited)
)

## Pengurangan Indeks
user_place_array = user_place_array - 1
place_not_visited = place_not_visited - 1

# Prediksi rating tempat wisata yang belum dikunjungi
ratings = model.predict(user_place_array).flatten()

# Mengambil indeks tempat dengan rating tertinggi
top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_place_ids = [place_not_visited[x][0] for x in top_ratings_indices]

# Menampilkan rekomendasi
print(f"Rekomendasi untuk user {id_user}")
print("===" * 9)
print("Tempat yang sudah dikunjungi dengan rating tinggi:")
print("----" * 8)

top_places_user = (
    place_visited_by_user.sort_values(
        by="Place_Ratings", ascending=False
    )
    .head(5)
    .Place_Id.values
)

visited_places = df_wisata[df_wisata['id'].isin(top_places_user)]
for row in visited_places.itertuples():
    print(row.nama_tempat, ":", row.kategori, ":" , row.kota)

print("----" * 8)
print("10 Rekomendasi Tempat Wisata:")
print("----" * 8)

recommended_places = df_wisata[df_wisata['id'].isin(recommended_place_ids)]
for row in recommended_places.itertuples():
    print(row.nama_tempat, ":", row.kategori, ":" , row.kota)

"""# **EVALUATION**

## **Recommender System Precision**

ecommender System Precision adalah metrik evaluasi yang digunakan untuk mengukur seberapa relevan rekomendasi yang diberikan oleh sistem dengan preferensi atau kebutuhan pengguna. Precision mengukur seberapa banyak item yang direkomendasikan benar-benar relevan dibandingkan dengan total item yang direkomendasikan. Semakin tinggi precision, semakin relevan rekomendasi yang diberikan oleh sistem, karena sistem memberikan lebih banyak item yang sesuai dengan preferensi pengguna.

Berdasarkan kasus pada model content based filtering, tujuannya adalah ingin memberikan rekomendasi tempat wisata yang mirip dengan "Surabaya North Quay". Surabaya North Quay dikategorikan ke dalam Taman Hiburan yang ada di Kota Surabaya, sehingga diharapkan rekomendasi yang diberikan adalah tempat dengan kategori Taman Hiburan di Surabaya.

$$\text{Precision} = \frac{\text{Jumlah item relevan yang direkomendasikan}}{\text{Jumlah total item yang direkomendasikan}}$$

$$\text{Precision} = \frac{\text{5}}{\text{5}} = 1$$

Hasil di atas menunjukkan bahwa sistem merokemendasikan tempat wisata secara akurat.

## **Visualisasi Metrik RMSE**

RMSE (Root Mean Squared Error) adalah metrik yang digunakan untuk mengukur seberapa besar perbedaan antara nilai prediksi dan nilai aktual dalam satuan yang sama dengan data asli. Proses perhitungannya melibatkan langkah pertama untuk mengkuadratkan selisih antara nilai prediksi dan nilai sebenarnya, lalu menghitung rata-rata dari hasil kuadrat tersebut, dan akhirnya mengambil akar kuadrat dari rata-rata tersebut. Hasil RMSE yang lebih rendah menunjukkan model yang lebih baik dalam memprediksi dengan akurat, karena kesalahan yang lebih kecil menghasilkan nilai RMSE yang lebih rendah.

Menampilkan visualisasi metrik hasil training
"""

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()